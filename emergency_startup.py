#!/usr/bin/env python3
"""
–ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Nuclei Scanner
–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–∏—Å—Ç–µ–º—ã –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import os
import sys
from flask import Flask, render_template_string, request, redirect, flash, session

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '/opt/nuclei-scanner')

app = Flask(__name__)
app.secret_key = 'emergency-key-change-me'

# –ü—Ä–æ—Å—Ç—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
ADMIN_USER = 'admin'
ADMIN_PASS = 'nuclei_admin_2024!'

@app.route('/')
def index():
    if 'logged_in' in session:
        return redirect('/dashboard')
    return redirect('/login')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        
        if username == ADMIN_USER and password == ADMIN_PASS:
            session['logged_in'] = True
            flash('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º!', 'success')
            return redirect('/dashboard')
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'error')
    
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Nuclei Scanner - –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—Ö–æ–¥</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body class="bg-light">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card mt-5">
                        <div class="card-header bg-warning">
                            <h4><i class="fa fa-exclamation-triangle"></i> –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º</h4>
                        </div>
                        <div class="card-body">
                            {% with messages = get_flashed_messages(with_categories=true) %}
                                {% if messages %}
                                    {% for category, message in messages %}
                                        <div class="alert alert-{{ 'danger' if category == 'error' else category }}">
                                            {{ message }}
                                        </div>
                                    {% endfor %}
                                {% endif %}
                            {% endwith %}
                            
                            <form method="POST">
                                <div class="mb-3">
                                    <label class="form-label">–õ–æ–≥–∏–Ω</label>
                                    <input type="text" class="form-control" name="username" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                                    <input type="password" class="form-control" name="password" required>
                                </div>
                                <button type="submit" class="btn btn-warning">–í–æ–π—Ç–∏</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
    </html>
    ''')

@app.route('/dashboard')
def dashboard():
    if 'logged_in' not in session:
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    services_status = check_services()
    
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Nuclei Scanner - –ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–∞–Ω–µ–ª—å</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <nav class="navbar navbar-expand-lg navbar-dark bg-warning">
            <div class="container">
                <span class="navbar-brand">üö® Nuclei Scanner - –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º</span>
                <a href="/logout" class="btn btn-outline-dark">–í—ã–π—Ç–∏</a>
            </div>
        </nav>
        
        <div class="container mt-4">
            <div class="alert alert-warning">
                <h4>‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ</h4>
                <p>–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</p>
            </div>
            
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤</h5>
                        </div>
                        <div class="card-body">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>–°–µ—Ä–≤–∏—Å</th>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                        <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for service, status in services.items() %}
                                    <tr>
                                        <td>{{ service }}</td>
                                        <td>
                                            <span class="badge bg-{{ 'success' if status else 'danger' }}">
                                                {{ '–ê–∫—Ç–∏–≤–µ–Ω' if status else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' }}
                                            </span>
                                        </td>
                                        <td>
                                            <a href="/restart/{{ service }}" class="btn btn-sm btn-primary">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</a>
                                        </td>
                                    </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h5>
                        </div>
                        <div class="card-body">
                            <a href="/logs" class="btn btn-info mb-2 d-block">–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤</a>
                            <a href="/restart-all" class="btn btn-warning mb-2 d-block">–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ</a>
                            <a href="/status" class="btn btn-secondary mb-2 d-block">–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å</a>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
                        </div>
                        <div class="card-body">
                            <p><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> {{ current_time }}</p>
                            <p><strong>–†–µ–∂–∏–º:</strong> –ê–≤–∞—Ä–∏–π–Ω—ã–π</p>
                            <p><strong>–í–µ—Ä—Å–∏—è:</strong> Emergency v1.0</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
    </html>
    ''', services=services_status, current_time=get_current_time())

@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    return redirect('/login')

@app.route('/logs')
def logs():
    if 'logged_in' not in session:
        return redirect('/login')
    
    log_content = get_recent_logs()
    
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <nav class="navbar navbar-dark bg-warning">
            <div class="container">
                <span class="navbar-brand">üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</span>
                <a href="/dashboard" class="btn btn-outline-dark">–ù–∞–∑–∞–¥</a>
            </div>
        </nav>
        
        <div class="container mt-4">
            <div class="card">
                <div class="card-header">
                    <h5>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö</h5>
                </div>
                <div class="card-body">
                    <pre style="background: #f8f9fa; padding: 15px; max-height: 500px; overflow-y: scroll;">{{ logs }}</pre>
                </div>
            </div>
        </div>
    </body>
    </html>
    ''', logs=log_content)

@app.route('/restart/<service>')
def restart_service(service):
    if 'logged_in' not in session:
        return redirect('/login')
    
    result = restart_system_service(service)
    flash(f'–°–µ—Ä–≤–∏—Å {service}: {result}', 'info')
    return redirect('/dashboard')

@app.route('/restart-all')
def restart_all():
    if 'logged_in' not in session:
        return redirect('/login')
    
    services = ['supervisor', 'nginx', 'postgresql', 'redis']
    for service in services:
        restart_system_service(service)
    
    flash('–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã', 'success')
    return redirect('/dashboard')

def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    import subprocess
    
    services = {
        'PostgreSQL': False,
        'Redis': False,
        'Nginx': False,
        'Supervisor': False
    }
    
    service_names = {
        'PostgreSQL': 'postgresql',
        'Redis': 'redis-server',
        'Nginx': 'nginx',
        'Supervisor': 'supervisor'
    }
    
    for display_name, system_name in service_names.items():
        try:
            result = subprocess.run(['systemctl', 'is-active', system_name], 
                                   capture_output=True, text=True)
            services[display_name] = result.stdout.strip() == 'active'
        except:
            services[display_name] = False
    
    return services

def get_recent_logs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤"""
    import subprocess
    
    log_files = [
        '/var/log/nuclei-scanner/web.out.log',
        '/var/log/nuclei-scanner/web.err.log',
        '/var/log/syslog'
    ]
    
    logs = []
    
    for log_file in log_files:
        try:
            if os.path.exists(log_file):
                result = subprocess.run(['tail', '-20', log_file], 
                                       capture_output=True, text=True)
                logs.append(f"=== {log_file} ===")
                logs.append(result.stdout)
                logs.append("")
        except:
            logs.append(f"=== –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file} ===")
    
    return '\n'.join(logs) if logs else '–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'

def restart_system_service(service):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    import subprocess
    
    service_map = {
        'PostgreSQL': 'postgresql',
        'Redis': 'redis-server', 
        'Nginx': 'nginx',
        'Supervisor': 'supervisor'
    }
    
    system_name = service_map.get(service, service)
    
    try:
        subprocess.run(['systemctl', 'restart', system_name], check=True)
        return '–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    except subprocess.CalledProcessError:
        return '–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞'
    except:
        return '–∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'

def get_current_time():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    from datetime import datetime
    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')

if __name__ == '__main__':
    print("üö® –ó–∞–ø—É—Å–∫ Nuclei Scanner –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    print("üìä –î–æ—Å—Ç—É–ø: http://localhost:5001")
    print("üîê –õ–æ–≥–∏–Ω: admin / –ü–∞—Ä–æ–ª—å: nuclei_admin_2024!")
    
    app.run(debug=True, host='0.0.0.0', port=5001)
