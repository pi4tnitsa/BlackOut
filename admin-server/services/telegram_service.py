# services/telegram_service.py - –°–µ—Ä–≤–∏—Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import requests
import json
from typing import Optional, Dict, Any
from config.settings import Config
from models.vulnerability import Vulnerability
from utils.logger import get_logger

logger = get_logger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = Config.TELEGRAM_BOT_TOKEN
        self.chat_id = Config.TELEGRAM_CHAT_ID
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        self.severity_filter = ['high', 'critical']  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        self.severity_emojis = {
            'critical': 'üî¥',
            'high': 'üü†',
            'medium': 'üü°',
            'low': 'üü¢',
            'info': 'üîµ'
        }
    
    def send_vulnerability_alert(self, vulnerability: Vulnerability, database_name: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        if not self._should_send_alert(vulnerability):
            return True  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        
        message = self._format_vulnerability_message(vulnerability, database_name)
        return self._send_message(message)
    
    def send_scan_notification(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self._send_message(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n{message}")
    
    def send_server_alert(self, server_name: str, status: str, details: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        emoji = "‚úÖ" if status == "online" else "‚ùå"
        message = f"{emoji} –°–µ—Ä–≤–µ—Ä: {server_name}\n–°—Ç–∞—Ç—É—Å: {status}"
        if details:
            message += f"\n–î–µ—Ç–∞–ª–∏: {details}"
        
        return self._send_message(message)
    
    def _should_send_alert(self, vulnerability: Vulnerability) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if vulnerability.severity_level not in self.severity_filter:
            return False
        
        return True
    
    def _format_vulnerability_message(self, vulnerability: Vulnerability, database_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        emoji = self.severity_emojis.get(vulnerability.severity_level, '‚ö™')
        
        message = f"""üö® –ù–ê–ô–î–ï–ù–ê –£–Ø–ó–í–ò–ú–û–°–¢–¨ {emoji}

üìç –†–µ–≥–∏–æ–Ω: {database_name.upper()}
üéØ IP-–∞–¥—Ä–µ—Å: {vulnerability.ip_address}
üîç –®–∞–±–ª–æ–Ω: {vulnerability.template_method or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üåê –ú–µ—Ç–æ–¥: {vulnerability.connection_method or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {vulnerability.severity_level.upper()}
üîó URL: {vulnerability.url or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üñ•Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: –°–µ—Ä–≤–µ—Ä #{vulnerability.source_host_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚è∞ –í—Ä–µ–º—è: {vulnerability.timestamp.strftime('%Y-%m-%d %H:%M:%S') if vulnerability.timestamp else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {vulnerability.additional_info or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"""
        
        return message
    
    def _send_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            logger.error("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            url = f"{self.api_url}/sendMessage"
            payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}")
            return False
    
    def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            url = f"{self.api_url}/getMe"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            if data.get('ok'):
                return {
                    'success': True,
                    'bot_info': data.get('result', {})
                }
            else:
                return {
                    'success': False,
                    'error': data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }