# test_connectivity.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã Nuclei Scanner
"""

import sys
import os
import psycopg2
import redis
import requests
import subprocess
from datetime import datetime

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        conn_params = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'port': os.getenv('DB_PORT', '5432'),
            'user': os.getenv('DB_ADMIN_USER', 'admin'),
            'password': os.getenv('DB_ADMIN_PASSWORD', 'admin_password'),
            'database': 'belarus'  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É –∏–∑ –±–∞–∑
        }
        
        conn = psycopg2.connect(**conn_params)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('vulnerabilities', 'servers', 'scan_tasks')
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        
        if len(tables) == 3:
            print("‚úÖ PostgreSQL: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            print(f"‚ö†Ô∏è  PostgreSQL: –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {tables}, –æ–∂–∏–¥–∞–ª–∏—Å—å: vulnerabilities, servers, scan_tasks")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå PostgreSQL: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    try:
        redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
        r = redis.from_url(redis_url)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ
        test_key = f"nuclei_test_{datetime.now().timestamp()}"
        r.set(test_key, "test_value", ex=10)  # –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        
        value = r.get(test_key)
        if value == b"test_value":
            print("‚úÖ Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            r.delete(test_key)
            return True
        else:
            print("‚ùå Redis: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        print(f"‚ùå Redis: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_nuclei_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nuclei"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nuclei...")
    
    try:
        result = subprocess.run(['nuclei', '-version'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            version = result.stdout.strip()
            print(f"‚úÖ Nuclei: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è {version}")
            return True
        else:
            print(f"‚ùå Nuclei: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ - {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå Nuclei: –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå Nuclei: –û—à–∏–±–∫–∞ - {e}")
        return False

def test_web_application():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        response = requests.get('http://localhost:5000', timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –î–æ—Å—Ç—É–ø–Ω–æ")
            return True
        elif response.status_code == 302:
            print("‚úÖ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –î–æ—Å—Ç—É–ø–Ω–æ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)")
            return True
        else:
            print(f"‚ö†Ô∏è  Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ù–µ–æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ localhost:5000")
        return False
    except Exception as e:
        print(f"‚ùå Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ - {e}")
        return False

def test_templates_directory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤...")
    
    templates_path = os.getenv('NUCLEI_TEMPLATES_PATH', '/opt/nuclei-templates')
    custom_path = os.getenv('CUSTOM_TEMPLATES_PATH', '/opt/custom-templates')
    
    success = True
    
    if os.path.exists(templates_path) and os.path.isdir(templates_path):
        template_count = len([f for f in os.listdir(templates_path) if f.endswith('.yaml')])
        print(f"‚úÖ Nuclei Templates: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞, {template_count} —à–∞–±–ª–æ–Ω–æ–≤")
    else:
        print(f"‚ùå Nuclei Templates: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {templates_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        success = False
    
    if os.path.exists(custom_path) and os.path.isdir(custom_path):
        custom_count = len([f for f in os.listdir(custom_path) if f.endswith('.yaml')])
        print(f"‚úÖ Custom Templates: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞, {custom_count} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    else:
        print(f"‚ö†Ô∏è  Custom Templates: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {custom_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return success

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Nuclei Scanner")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    env_file = '.env'
    if os.path.exists(env_file):
        print(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ {env_file}")
        from dotenv import load_dotenv
        load_dotenv(env_file)
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL", test_database_connection),
        ("Redis", test_redis_connection),
        ("Nuclei", test_nuclei_installation),
        ("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_web_application),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤", test_templates_directory)
    ]
    
    results = []
    
    print("\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤:")
    print("-" * 40)
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå {name}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
            results.append((name, False))
        print()
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("-" * 40)
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name:<25} {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        return 1

if __name__ == "__main__":
    sys.exit(main())
