#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Nuclei Scanner
"""

import sys
import os
import time
import requests
import subprocess
import psycopg2
import redis
from datetime import datetime

def test_database():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL...")
    try:
        conn = psycopg2.connect(
            host='localhost',
            port='5432',
            database='belarus',
            user='admin',
            password='nuclei_admin_pass_2024!'
        )
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'")
        table_count = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL: {table_count} —Ç–∞–±–ª–∏—Ü –Ω–∞–π–¥–µ–Ω–æ")
        conn.close()
        return True
    except Exception as e:
        print(f"‚ùå PostgreSQL: {e}")
        return False

def test_redis():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis...")
    try:
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        print("‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå Redis: {e}")
        return False

def test_web_app():
    """–¢–µ—Å—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    try:
        response = requests.get('http://localhost:5000', timeout=10)
        if response.status_code in [200, 302]:
            print("‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ")
            return True
        else:
            print(f"‚ö†Ô∏è –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
        return False

def test_nuclei():
    """–¢–µ—Å—Ç Nuclei"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nuclei...")
    try:
        result = subprocess.run(['nuclei', '-version'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Nuclei: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Nuclei: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Nuclei: {e}")
        return False

def test_services():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    services = ['postgresql', 'redis-server', 'nginx', 'supervisor']
    all_ok = True
    
    for service in services:
        try:
            result = subprocess.run(['systemctl', 'is-active', service], 
                                  capture_output=True, text=True)
            if result.stdout.strip() == 'active':
                print(f"‚úÖ {service}: –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                print(f"‚ùå {service}: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                all_ok = False
        except Exception as e:
            print(f"‚ùå {service}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            all_ok = False
    
    return all_ok

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Nuclei Scanner")
    print("=" * 50)
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("Redis", test_redis),
        ("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_web_app),
        ("Nuclei", test_nuclei),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã", test_services)
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
            print()
        except Exception as e:
            print(f"‚ùå {name}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
            print()
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\nüåê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:")
        print("URL: http://localhost")
        print("–õ–æ–≥–∏–Ω: admin")
        print("–ü–∞—Ä–æ–ª—å: nuclei_admin_2024!")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())
