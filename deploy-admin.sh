#!/bin/bash
# -*- coding: utf-8 -*-
# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Nuclei Scanner
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy-admin.sh

set -e

echo "üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Nuclei Scanner - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"
echo "=================================================="

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
APP_DIR="/opt/nuclei-admin"
APP_USER="nuclei"
DB_NAME="nuclei_scanner"
DB_USER="nuclei_user"
PYTHON_VERSION="3.9"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if [ -f /etc/debian_version ]; then
    OS="debian"
    print_status "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Debian/Ubuntu —Å–∏—Å—Ç–µ–º–∞"
elif [ -f /etc/redhat-release ]; then
    OS="redhat"
    print_status "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ RedHat/CentOS —Å–∏—Å—Ç–µ–º–∞"
else
    print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é..."
    OS="unknown"
fi

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è Debian/Ubuntu
install_packages_debian() {
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    apt-get update -qq

    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    apt-get install -y \
        python3 \
        python3-pip \
        python3-venv \
        python3-dev \
        postgresql \
        postgresql-contrib \
        nginx \
        supervisor \
        git \
        curl \
        wget \
        unzip \
        build-essential \
        libpq-dev \
        redis-server \
        golang-go \
        openssl
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è RedHat/CentOS
install_packages_redhat() {
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    yum update -y

    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ EPEL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    yum install -y epel-release

    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    yum install -y \
        python3 \
        python3-pip \
        python3-devel \
        postgresql-server \
        postgresql-contrib \
        nginx \
        supervisor \
        git \
        curl \
        wget \
        unzip \
        gcc \
        gcc-c++ \
        make \
        postgresql-devel \
        redis \
        golang \
        openssl
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
create_app_user() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    if ! id "$APP_USER" &>/dev/null; then
        useradd -r -m -s /bin/bash "$APP_USER"
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $APP_USER —Å–æ–∑–¥–∞–Ω"
    else
        print_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $APP_USER —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
setup_postgresql() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è RedHat)
    if [ "$OS" = "redhat" ]; then
        postgresql-setup initdb || true
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã PostgreSQL
    systemctl start postgresql
    systemctl enable postgresql
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    DB_PASSWORD=$(openssl rand -base64 32)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PostgreSQL
    PG_VERSION=$(sudo -u postgres psql -t -c "SELECT version();" | grep -oP '\d+\.\d+' | head -1)
    PG_CONFIG_DIR="/etc/postgresql/${PG_VERSION}/main"
    
    # –î–ª—è Ubuntu/Debian
    if [ "$OS" = "debian" ]; then
        if [ -d "$PG_CONFIG_DIR" ]; then
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pg_hba.conf –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            sed -i "s/#listen_addresses = 'localhost'/listen_addresses = 'localhost'/" "${PG_CONFIG_DIR}/postgresql.conf"
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ PostgreSQL
            systemctl restart postgresql
        fi
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    sudo -u postgres psql << EOF
CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';
ALTER USER $DB_USER CREATEDB;
CREATE DATABASE ${DB_NAME}_belarus OWNER $DB_USER;
CREATE DATABASE ${DB_NAME}_russia OWNER $DB_USER;
CREATE DATABASE ${DB_NAME}_kazakhstan OWNER $DB_USER;
GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME}_belarus TO $DB_USER;
GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME}_russia TO $DB_USER;
GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME}_kazakhstan TO $DB_USER;
\q
EOF

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞
    cat > /etc/nuclei-admin.env << EOF
DB_BELARUS=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/${DB_NAME}_belarus
DB_RUSSIA=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/${DB_NAME}_russia
DB_KAZAKHSTAN=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/${DB_NAME}_kazakhstan
CURRENT_DB=belarus
DB_PASSWORD=$DB_PASSWORD
EOF
    
    chmod 600 /etc/nuclei-admin.env
    
    print_success "PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ /etc/nuclei-admin.env"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
setup_app_directory() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    mkdir -p "$APP_DIR"
    mkdir -p "$APP_DIR/templates"
    mkdir -p "$APP_DIR/static"
    mkdir -p "$APP_DIR/static/css"
    mkdir -p "$APP_DIR/static/js"
    mkdir -p "$APP_DIR/static/img"
    mkdir -p "$APP_DIR/logs"
    
    chown -R "$APP_USER:$APP_USER" "$APP_DIR"
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: $APP_DIR"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nuclei
install_nuclei() {
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nuclei..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    ARCH=$(uname -m)
    case $ARCH in
        x86_64)
            NUCLEI_ARCH="linux_amd64"
            GO_ARCH="linux-amd64"
            ;;
        aarch64|arm64)
            NUCLEI_ARCH="linux_arm64"
            GO_ARCH="linux-arm64"
            ;;
        *)
            print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
            exit 1
            ;;
    esac
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if ! command -v go &> /dev/null; then
        print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go..."
        GO_VERSION="1.21.5"
        cd /tmp
        wget "https://go.dev/dl/go${GO_VERSION}.${GO_ARCH}.tar.gz" -O go.tar.gz
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        rm -rf /usr/local/go
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        tar -C /usr/local -xzf go.tar.gz
        rm go.tar.gz
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH
        echo 'export PATH=$PATH:/usr/local/go/bin' > /etc/profile.d/go.sh
        chmod +x /etc/profile.d/go.sh
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        export PATH=$PATH:/usr/local/go/bin
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Go
        if /usr/local/go/bin/go version >/dev/null 2>&1; then
            print_success "Go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: $(/usr/local/go/bin/go version)"
        else
            print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Go"
            exit 1
        fi
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Nuclei —á–µ—Ä–µ–∑ –±–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ–ª–∏–∑ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
    print_status "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Nuclei..."
    NUCLEI_VERSION="v3.1.4"
    NUCLEI_URL="https://github.com/projectdiscovery/nuclei/releases/download/${NUCLEI_VERSION}/nuclei_${NUCLEI_VERSION#v}_${NUCLEI_ARCH}.zip"
    
    cd /tmp
    curl -L -o nuclei.zip "$NUCLEI_URL"
    
    if [ ! -f nuclei.zip ]; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Nuclei"
        exit 1
    fi
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    unzip -o nuclei.zip
    chmod +x nuclei
    mv nuclei /usr/local/bin/
    rm -f nuclei.zip README.md LICENSE.md
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if nuclei -version >/dev/null 2>&1; then
        print_success "Nuclei —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: $(nuclei -version)"
    else
        print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nuclei"
        exit 1
    fi
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã
    print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ Nuclei..."
    sudo -u "$APP_USER" nuclei -update-templates -silent || true
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python_deps() {
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    sudo -u "$APP_USER" python3 -m venv "$APP_DIR/venv"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
    cat > "$APP_DIR/requirements.txt" << 'EOF'
Flask==2.3.3
Flask-SQLAlchemy==3.0.5
Werkzeug==2.3.7
psycopg2-binary==2.9.7
SQLAlchemy==2.0.20
paramiko==3.3.1
requests==2.31.0
ipaddress==1.0.23
netaddr==0.8.0
gunicorn==21.2.0
gevent==23.7.0
celery==5.3.1
redis==4.6.0
python-dotenv==1.0.0
schedule==1.2.0
psutil==5.9.5
click==8.1.7
colorama==0.4.6
structlog==23.1.0
marshmallow==3.20.1
orjson==3.9.5
cryptography==41.0.4
python-dateutil==2.8.2
pytz==2023.3
EOF

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    sudo -u "$APP_USER" "$APP_DIR/venv/bin/pip" install --upgrade pip
    sudo -u "$APP_USER" "$APP_DIR/venv/bin/pip" install -r "$APP_DIR/requirements.txt"
    
    print_success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
deploy_app_files() {
    print_status "–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if [ -f "app.py" ]; then
        cp app.py "$APP_DIR/"
        chown "$APP_USER:$APP_USER" "$APP_DIR/app.py"
    else
        print_error "–§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        exit 1
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
    if [ -d "templates" ]; then
        cp -r templates/* "$APP_DIR/templates/"
        chown -R "$APP_USER:$APP_USER" "$APP_DIR/templates/"
    else
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        exit 1
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    if [ -d "static" ]; then
        cp -r static/* "$APP_DIR/static/"
        chown -R "$APP_USER:$APP_USER" "$APP_DIR/static/"
    else
        print_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã"
        mkdir -p "$APP_DIR/static/css" "$APP_DIR/static/js" "$APP_DIR/static/img"
    fi
    
    chown -R "$APP_USER:$APP_USER" "$APP_DIR/static"
    
    print_success "–§–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
setup_config() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    source /etc/nuclei-admin.env
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    SECRET_KEY=$(openssl rand -base64 64)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    cat > "$APP_DIR/.env" << EOF
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nuclei Scanner
SECRET_KEY='$SECRET_KEY'

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_BELARUS=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/${DB_NAME}_belarus
DB_RUSSIA=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/${DB_NAME}_russia
DB_KAZAKHSTAN=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/${DB_NAME}_kazakhstan
CURRENT_DB=belarus

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
ADMIN_USER=admin
ADMIN_PASS=admin123

# SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤
SSH_USER=root
SSH_KEY_PATH=/home/$APP_USER/.ssh/id_rsa

# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
DEBUG=False
PORT=5000
EOF

    chown "$APP_USER:$APP_USER" "$APP_DIR/.env"
    chmod 600 "$APP_DIR/.env"
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–µ–π
setup_ssh_keys() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–µ–π..."
    
    SSH_DIR="/home/$APP_USER/.ssh"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ SSH –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    sudo -u "$APP_USER" mkdir -p "$SSH_DIR"
    sudo -u "$APP_USER" chmod 700 "$SSH_DIR"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "$SSH_DIR/id_rsa" ]; then
        sudo -u "$APP_USER" ssh-keygen -t rsa -b 4096 -f "$SSH_DIR/id_rsa" -N ""
        print_success "SSH –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $SSH_DIR/id_rsa.pub"
        print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ –≤–æ—Ä–∫–µ—Ä-—Å–µ—Ä–≤–µ—Ä—ã!"
        echo "–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:"
        cat "$SSH_DIR/id_rsa.pub"
    else
        print_warning "SSH –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
setup_nginx() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
    cat > /etc/nginx/sites-available/nuclei-admin << 'EOF'
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

server {
    listen 80;
    server_name _;
    
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30;
        proxy_send_timeout 30;
        proxy_read_timeout 30;
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        limit_req zone=one burst=10 nodelay;
    }
    
    location /static {
        alias /opt/nuclei-admin/static;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 10M;
    
    # –õ–æ–≥–∏
    access_log /var/log/nginx/nuclei-admin.access.log;
    error_log /var/log/nginx/nuclei-admin.error.log;
}
EOF

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞
    if [ "$OS" = "debian" ]; then
        ln -sf /etc/nginx/sites-available/nuclei-admin /etc/nginx/sites-enabled/
        rm -f /etc/nginx/sites-enabled/default
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    nginx -t
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx
    systemctl restart nginx
    systemctl enable nginx
    
    print_success "Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supervisor
setup_supervisor() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supervisor..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supervisor
    cat > /etc/supervisor/conf.d/nuclei-admin.conf << EOF
[program:nuclei-admin]
command=$APP_DIR/venv/bin/gunicorn --bind 127.0.0.1:5000 --workers 4 --worker-class gevent --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 50 app:app
directory=$APP_DIR
user=$APP_USER
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=$APP_DIR/logs/gunicorn.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5
environment=PATH="$APP_DIR/venv/bin",PYTHONUNBUFFERED=1
EOF

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Supervisor
    systemctl restart supervisor
    systemctl enable supervisor
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    supervisorctl reread
    supervisorctl update
    
    print_success "Supervisor –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥—Ä–æ—Ç–∞—Ü–∏–∏
setup_logrotate() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤..."
    
    cat > /etc/logrotate.d/nuclei-admin << EOF
$APP_DIR/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 $APP_USER $APP_USER
    postrotate
        supervisorctl restart nuclei-admin
    endscript
}
EOF

    print_success "–õ–æ–≥—Ä–æ—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
setup_firewall() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
    
    if command -v ufw >/dev/null 2>&1; then
        # Ubuntu/Debian UFW
        ufw allow ssh
        ufw allow 80/tcp
        ufw allow 443/tcp
        ufw --force enable
        print_success "UFW firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    elif command -v firewall-cmd >/dev/null 2>&1; then
        # CentOS/RHEL firewalld
        firewall-cmd --permanent --add-service=ssh
        firewall-cmd --permanent --add-service=http
        firewall-cmd --permanent --add-service=https
        firewall-cmd --reload
        print_success "Firewalld –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_warning "Firewall –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ—Ä—Ç—ã 22, 80, 443"
    fi
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    print_status "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    cd "$APP_DIR"
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sudo -u "$APP_USER" bash -c "
        cd $APP_DIR
        source .env
        export SKIP_BACKGROUND_TASKS=1
        timeout 30 $APP_DIR/venv/bin/python app.py > /tmp/nuclei-init.log 2>&1 &
        APP_PID=\$!
        
        # –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥)
        for i in {1..20}; do
            if grep -q 'Nuclei Scanner –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' /tmp/nuclei-init.log 2>/dev/null; then
                kill \$APP_PID 2>/dev/null || true
                echo '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                exit 0
            fi
            sleep 1
        done
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        kill \$APP_PID 2>/dev/null || true
        echo '–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...'
        
        $APP_DIR/venv/bin/python -c \"
import sys, os
sys.path.insert(0, os.getcwd())
os.environ['SKIP_BACKGROUND_TASKS'] = '1'
from app import create_app, db
app = create_app()
with app.app_context():
    db.create_all()
    print('–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')
\" 2>/dev/null && echo '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' || echo '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'
    "
    
    if [ $? -eq 0 ]; then
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
    else
        print_warning "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: /tmp/nuclei-init.log"
        print_status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    echo "PostgreSQL: $(systemctl is-active postgresql)"
    echo "Nginx: $(systemctl is-active nginx)"
    echo "Supervisor: $(systemctl is-active supervisor)"
    echo "Redis: $(systemctl is-active redis-server || systemctl is-active redis || echo 'inactive')"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sleep 5
    echo "Nuclei Admin: $(supervisorctl status nuclei-admin | awk '{print $2}' || echo 'not running')"
    
    print_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
print_final_info() {
    echo ""
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nuclei Scanner –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo "=========================================="
    echo ""
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
    echo "   ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $APP_DIR"
    echo "   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $APP_USER"
    echo "   ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $APP_DIR/.env"
    echo "   ‚Ä¢ –õ–æ–≥–∏: $APP_DIR/logs/"
    echo ""
    echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:"
    echo "   ‚Ä¢ URL: http://$(hostname -I | awk '{print $1}')"
    echo "   ‚Ä¢ –õ–æ–≥–∏–Ω: admin"
    echo "   ‚Ä¢ –ü–∞—Ä–æ–ª—å: admin123"
    echo ""
    echo "üîë SSH –∫–ª—é—á –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤:"
    echo "   ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: /home/$APP_USER/.ssh/id_rsa.pub"
    echo ""
    echo "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:"
    echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: supervisorctl status nuclei-admin"
    echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: supervisorctl restart nuclei-admin"
    echo "   ‚Ä¢ –õ–æ–≥–∏: tail -f $APP_DIR/logs/gunicorn.log"
    echo ""
    echo "üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSH –∫–ª—é—á–∏ –Ω–∞ –≤–æ—Ä–∫–µ—Ä-—Å–µ—Ä–≤–µ—Ä–∞—Ö"
    echo "   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    echo "   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ"
    echo "   4. –î–æ–±–∞–≤—å—Ç–µ –≤–æ—Ä–∫–µ—Ä-—Å–µ—Ä–≤–µ—Ä—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    echo ""
    echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ /etc/nuclei-admin.env"
    echo ""
    print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_status "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Nuclei Scanner..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    if [ "$OS" = "debian" ]; then
        install_packages_debian
    elif [ "$OS" = "redhat" ]; then
        install_packages_redhat
    else
        print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
        exit 1
    fi
    
    create_app_user
    setup_postgresql
    setup_app_directory
    install_nuclei
    install_python_deps
    deploy_app_files
    setup_config
    setup_ssh_keys
    setup_nginx
    setup_supervisor
    setup_logrotate
    setup_firewall
    init_database
    check_services
    print_final_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO"' ERR

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"